<Styles xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:controls="using:ClassIsland.Controls"
        xmlns:ci="http://classisland.tech/schemas/xaml/core"
        xmlns:system="clr-namespace:System;assembly=System.Runtime"
        xmlns:classIsland="using:ClassIsland">
    <Styles.Resources>
    </Styles.Resources>
    <Design.PreviewWith>
        <Border Padding="20">
            <!-- Add Controls for Previewer Here -->
        </Border>
    </Design.PreviewWith>
    
    <StyleInclude Source="/Controls/MainWindowLine.axaml"/>
    
    <Style Selector="ItemsControl#RootMainWindowLinesItemsControl">
        <Setter Property="ClipToBounds" Value="False"/>
    </Style>
    <Style Selector=":dock-top ItemsControl#RootMainWindowLinesItemsControl">
        <Setter Property="Margin" Value="0 0 0 16"/>
    </Style>
    <Style Selector=":dock-bottom ItemsControl#RootMainWindowLinesItemsControl">
        <Setter Property="Margin" Value="0 16 0 0"/>
    </Style>
    
    <Style Selector=":is(Control).clip-host[(ci|MainWindowStylesAssist.IsIslandSeperated)=False]">
        <Setter Property="Clip">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource WidthDoubleToRectConverter}">
                    <Binding Path="BackgroundWidth" Mode="OneWay"
                             RelativeSource="{RelativeSource FindAncestor, AncestorType=controls:MainWindowLine}" />
                    <Binding Path="Bounds.Width" Mode="OneWay" RelativeSource="{RelativeSource Self}" />
                    <Binding Path="Bounds.Height" Mode="OneWay" RelativeSource="{RelativeSource Self}" />
                    <Binding Path="ViewModel.Settings.WindowDockingLocation" Mode="OneWay"
                             RelativeSource="{RelativeSource FindAncestor, AncestorType=classIsland:MainWindow}" />
                    <Binding Path="ViewModel.Settings.RadiusX" Mode="OneWay"
                             RelativeSource="{RelativeSource FindAncestor, AncestorType=classIsland:MainWindow}" />
                    <Binding Path="ViewModel.Settings.RadiusX" Mode="OneWay"
                             RelativeSource="{RelativeSource FindAncestor, AncestorType=classIsland:MainWindow}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style Selector="Border.line-background">
        <Style.Resources>
            <ci:SizeDoubleToCornerRadiusConverter x:Key="SizeDoubleToCornerRadiusConverter"/>
        </Style.Resources>
        <Setter Property="Opacity" Value="{Binding $self.(ci:MainWindowStylesAssist.BackgroundOpacity), Mode=OneWay}"/>
        <Setter Property="Background" Value="{DynamicResource SolidBackgroundFillColorSecondaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlElevationBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="{Binding $self.(ci:MainWindowStylesAssist.CornerRadius), Converter={StaticResource SizeDoubleToCornerRadiusConverter}, ConverterParameter=1.0} "/>
        <Setter Property="BoxShadow" Value="0 4 8 2 #48000000"/>
    </Style>
    <Style Selector="controls|MainWindowLine Border[(ci|MainWindowStylesAssist.IsCustomBackgroundColorEnabled)=True].line-background">
        <Style.Resources>
            <ci:ColorToColorPickerBrushConverter x:Key="ColorToColorPickerBrushConverter"/>
        </Style.Resources>
        <Setter Property="Background" Value="{Binding $self.(ci:MainWindowStylesAssist.BackgroundColor), Converter={StaticResource ColorToColorPickerBrushConverter}}"/>
    </Style>
    
    <Style Selector="controls|MainWindowLine">
        <Style.Resources>
            <ci:BindingProxy x:TypeArguments="SolidColorBrush" x:Key="AccentFillColorDefaultBrushProxy" 
                             Data="{DynamicResource AccentFillColorDefaultBrush}"/>
            <ci:BindingProxy x:TypeArguments="SolidColorBrush" x:Key="AccentFillColorSecondaryBrushProxy"
                             Data="{DynamicResource AccentFillColorTertiaryBrush}"/>
            <ci:SolidColorBrushToColorConverter x:Key="SolidColorBrushToColorConverter" />
            <!--#endregion 1-->
            <ci:WidthDoubleToRectConverter x:Key="WidthDoubleToRectConverter" />

            <ci:ColorToColorPickerBrushConverter x:Key="ColorToColorPickerBrushConverter" />
            <system:Double x:Key="IslandContainerHeight">40</system:Double>
            <ci:SizeDoubleToCornerRadiusConverter x:Key="SizeDoubleToCornerRadiusConverter"/>
            
            <SolidColorBrush x:Key="FluentShadowBrush" ></SolidColorBrush>

            <ControlTemplate x:Key="MainWindowLineFullControlTemplate" TargetType="controls:MainWindowLine">
                <Grid 
                    ClipToBounds="False"
                    x:Name="GridRoot"
                    HorizontalAlignment="Stretch">
                    <Grid.Transitions>
                        <Transitions>
                            <EffectTransition Property="Effect" Duration="0:0:0.1">
                                <EffectTransition.Easing>
                                    <LinearEasing />
                                </EffectTransition.Easing>
                            </EffectTransition>
                        </Transitions>
                    </Grid.Transitions>
                    <Grid.Effect>
                        <DropShadowEffect OffsetX="0" OffsetY="0" Opacity="0" />
                    </Grid.Effect>
                    
                    <!-- Background -->
                    <Border x:Name="BackgroundBorder"
                            IsVisible="{Binding !$self.(ci:MainWindowStylesAssist.IsIslandSeperated)}"
                            Classes="docking line-background"
                            Width="{Binding BackgroundWidth, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType=controls:MainWindowLine}}"
                            Height="{DynamicResource IslandContainerHeight}" />
                    <Grid x:Name="ContentClipBorder" Classes="clip-host">
                        <Panel Classes="animated-resize" ClipToBounds="False">
                            <Grid x:Name="PART_GridWrapper" ClipToBounds="False"
                                  Height="{DynamicResource IslandContainerHeight}"
                                  Classes="docking">
                                <Grid Height="{DynamicResource IslandContainerHeight}"
                                      x:Name="GridContentRoot"
                                      MinWidth="20"
                                      Margin="12 0">
                                    <ContentPresenter
                                        Content="{Binding Content, RelativeSource={RelativeSource AncestorType=controls:MainWindowLine}}" />
                                </Grid>

                                <!-- Overlay View -->
                                <Grid x:Name="GridOverlay"
                                      ClipToBounds="True"
                                      Opacity="0">
                                    <Border ClipToBounds="True"
                                            IsHitTestVisible="False"
                                            Classes.line-background="{Binding $self.(ci:MainWindowStylesAssist.IsIslandSeperated)}">

                                        <ProgressBar VerticalAlignment="Bottom"
                                                     Maximum="1"
                                                     Value="{Binding CountdownProgressValue, RelativeSource={RelativeSource AncestorType=controls:MainWindowLine}}"
                                                     x:Name="OverlayTimeProgressBar"
                                                     MinWidth="0">
                                        </ProgressBar>
                                    </Border>
                                    <ContentPresenter
                                        MaxHeight="{DynamicResource IslandContainerHeight}"
                                        Content="{Binding OverlayContent.Content, RelativeSource={RelativeSource AncestorType=controls:MainWindowLine}}"
                                        ContentTemplate="{Binding OverlayContent.ContentTemplate, RelativeSource={RelativeSource AncestorType=controls:MainWindowLine}}" />

                                </Grid>

                            </Grid>
                        </Panel>
                    </Grid>
                    <!-- Mask -->
                    <Border x:Name="OverlayMask" Classes="docking"
                            Width="{TemplateBinding BackgroundWidth}"
                            TextElement.Foreground="{DynamicResource TextOnAccentFillColorPrimaryBrush}"
                            CornerRadius="{Binding ViewModel.Settings.RadiusX, RelativeSource={RelativeSource AncestorType=classIsland:MainWindow}, Converter={StaticResource SizeDoubleToCornerRadiusConverter}, ConverterParameter=1.0}"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Opacity="0"
                            ClipToBounds="True"
                            Height="{DynamicResource IslandContainerHeight}"
                            RenderTransformOrigin="{x:Static RelativePoint.Center}"
                            Background="{DynamicResource SolidBackgroundFillColorQuarternaryBrush}">
                        <Border.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform />
                            </TransformGroup>
                        </Border.RenderTransform>
                        <Border>
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0%,0%" EndPoint="100%,100%">
                                    <GradientStop Color="{Binding Data, Source={StaticResource AccentFillColorDefaultBrushProxy}, Converter={StaticResource SolidColorBrushToColorConverter}}" Offset="0.0"/>
                                    <GradientStop Color="{Binding Data, Source={StaticResource AccentFillColorSecondaryBrushProxy}, Converter={StaticResource SolidColorBrushToColorConverter}}" Offset="1.0"/>
                                </LinearGradientBrush>
                            </Border.Background>
                            <ContentPresenter x:Name="OverlayMaskContent"
                                              Opacity="0"
                                              Content="{Binding MaskContent.Content, RelativeSource={RelativeSource AncestorType=controls:MainWindowLine}}"
                                              ContentTemplate="{Binding MaskContent.ContentTemplate, RelativeSource={RelativeSource AncestorType=controls:MainWindowLine}}" />
                        </Border>
                    </Border>
                </Grid>
            </ControlTemplate>
            <ControlTemplate x:Key="MainWindowLineMinControlTemplate" TargetType="controls:MainWindowLine">
                <Grid 
                    ClipToBounds="False"
                    x:Name="GridRoot"
                    HorizontalAlignment="Stretch">
                    
                    <!-- Background -->
                    <Border x:Name="BackgroundBorder"
                            IsVisible="{Binding !$self.(ci:MainWindowStylesAssist.IsIslandSeperated)}"
                            Classes="docking line-background"
                            Width="{Binding BackgroundWidth, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType=controls:MainWindowLine}}"
                            Height="{DynamicResource IslandContainerHeight}" />
                    <Grid x:Name="ContentClipBorder" Classes="clip-host">
                        <Panel Classes="animated-resize" ClipToBounds="False">
                            <Grid x:Name="PART_GridWrapper" ClipToBounds="False"
                                  Height="{DynamicResource IslandContainerHeight}"
                                  Classes="docking">
                                <Grid Height="{DynamicResource IslandContainerHeight}"
                                      x:Name="GridContentRoot"
                                      MinWidth="20"
                                      Margin="12 0">
                                    <ContentPresenter
                                        Content="{Binding Content, RelativeSource={RelativeSource AncestorType=controls:MainWindowLine}}" />
                                </Grid>

                            </Grid>
                        </Panel>
                    </Grid>
                </Grid>
            </ControlTemplate>
            <ci:DoubleToThicknessMultiConverter x:Key="DoubleToThicknessMultiConverter" />
        </Style.Resources>
        
        <Style Selector="^ ci|ComponentPresenter[IsRootComponent=True]">
            <Setter Property="ContentTemplate">
                <DataTemplate>
                    <Panel>
                        <ContentPresenter Content="{Binding}"/>
                    </Panel>
                </DataTemplate>
            </Setter>
        </Style>
        <Style Selector="^ ci|ComponentPresenter[IsRootComponent=True][(ci|MainWindowStylesAssist.IsIslandSeperated)=True]">
            <Setter Property="ContentTemplate">
                <DataTemplate>
                    <Panel Margin="-2 0">
                        <Border Classes="line-background"/>
                        <Border ClipToBounds="True"
                                BorderThickness="1"
                                CornerRadius="{Binding $self.(ci:MainWindowStylesAssist.CornerRadius), Converter={StaticResource SizeDoubleToCornerRadiusConverter}, ConverterParameter=1.0}">
                            <ContentPresenter Content="{Binding}"
                                              Margin="16 0" />
                        </Border>
                    </Panel>
                </DataTemplate>
            </Setter>
        </Style>
        
        
        <Setter Property="Template" Value="{StaticResource MainWindowLineFullControlTemplate}"/>
        
        <Style Selector="^[(ci|ComponentPresenter.IsMainWindowLoaded)=True]">
            <Setter Property="Transitions">
                <Setter.Value>
                    <Transitions>
                        <DoubleTransition Property="Opacity" Duration="0:0:0.100"/>
                        <DoubleTransition Property="BackgroundWidth" Duration="0:0:0.550" Easing="0.00, 1.00, 0.50, 1.10"/>
                    </Transitions>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style Selector="^[IsNotificationEnabled=False]">
            <Setter Property="Template" Value="{StaticResource MainWindowLineMinControlTemplate}"/>
            <Setter Property="IsVisible" Value="{Binding IsAllComponentsHid, RelativeSource={RelativeSource Self}, Converter={StaticResource InvertBooleanConverter}}"/>
        </Style>
       
        <Style Selector="^[IsNotificationEnabled=True]">
            <Style Selector="^ /template/ ContentPresenter#OverlayMaskContent">
                <!-- <Setter Property="Transitions"> -->
                <!--     <Transitions> -->
                <!--         <DoubleTransition Property="Opacity" -->
                <!--                           Duration="0:0:0.2"> -->
                <!--             <DoubleTransition.Easing> -->
                <!--                 <SineEaseIn/> -->
                <!--             </DoubleTransition.Easing> -->
                <!--         </DoubleTransition> -->
                <!--     </Transitions> -->
                <!-- </Setter> -->
            </Style>
            <Style Selector="^ /template/ Grid#GridContentRoot">
                <Setter Property="Transitions">
                    <Transitions>
                        <DoubleTransition Property="Opacity"
                                          Duration="0:0:0.2">
                            <DoubleTransition.Easing>
                                <SineEaseIn/>
                            </DoubleTransition.Easing>
                        </DoubleTransition>
                    </Transitions>
                </Setter>
                <Setter Property="Opacity" Value="1"/>
            </Style>
            
            <Style Selector="^:mask-anim">
                
                <Style Selector="^ /template/ Border#OverlayMask">
                    
                </Style>
                
                <Style Selector="^:mask-in">
                    <Style Selector="^ /template/ Border#OverlayMask">
                        <Style.Animations>
                            <Animation Duration="0:0:0.60" IterationCount="1"
                                       FillMode="Both" Easing="0.00, 1.00, 0.50, 1.10">
                                <KeyFrame Cue="0%">
                                    <Setter Property="ScaleTransform.ScaleX" Value="0.2"/>
                                    <Setter Property="ScaleTransform.ScaleY" Value="0.2"/>
                                </KeyFrame>
                                <KeyFrame Cue="100%">
                                    <Setter Property="ScaleTransform.ScaleX" Value="1.0"/>
                                    <Setter Property="ScaleTransform.ScaleY" Value="1.0"/>
                                </KeyFrame>
                            </Animation>
                            <Animation Duration="0:0:0.50" IterationCount="1"
                                       FillMode="Both">
                                <KeyFrame Cue="0%">
                                    <Setter Property="Control.Opacity" Value="0.0"/>
                                </KeyFrame>
                                <KeyFrame Cue="100%">
                                    <Setter Property="Control.Opacity" Value="1.0"/>
                                </KeyFrame>
                            </Animation>
                        </Style.Animations>
                    </Style>

                    <Style Selector="^ /template/ Grid#GridRoot">
                        <Setter Property="Effect">
                            <DropShadowEffect OffsetX="0" OffsetY="0" Opacity="1" BlurRadius="8"/>
                        </Setter>
                    </Style>
                    <Style Selector="^ /template/ ContentPresenter#OverlayMaskContent">
                        <Style.Animations>
                            <Animation Delay="0:0:0.2" Duration="0:0:0.1" IterationCount="1"
                                       FillMode="Both">
                                <KeyFrame Cue="0%">
                                    <Setter Property="Opacity" Value="0.0"/>
                                </KeyFrame>
                                <KeyFrame Cue="100%">
                                    <Setter Property="Opacity" Value="1.0"/>
                                </KeyFrame>
                            </Animation>
                        </Style.Animations>
                    </Style>
                    <Style Selector="^ /template/ Grid#GridContentRoot">
                        <Setter Property="Opacity" Value="0"/>
                    </Style>
                </Style>
                <Style Selector="^:mask-out">
                    <Style Selector="^ /template/ Border#OverlayMask, ^ /template/ Border#BackgroundBorderOverlayMask">
                        <Style.Animations>
                            <Animation Duration="0:0:0.30" IterationCount="1"
                                       FillMode="Forward" Easing="0.33, 1, 0.68, 1">
                                <KeyFrame Cue="0%">
                                    <Setter Property="ScaleTransform.ScaleX" Value="1.0"/>
                                    <Setter Property="ScaleTransform.ScaleY" Value="1.0"/>
                                    <Setter Property="Control.Opacity" Value="1.0"/>
                                </KeyFrame>
                                <KeyFrame Cue="100%">
                                    <Setter Property="ScaleTransform.ScaleX" Value="0.2"/>
                                    <Setter Property="ScaleTransform.ScaleY" Value="0.2"/>
                                    <Setter Property="Control.Opacity" Value="0.0"/>
                                </KeyFrame>
                            </Animation>
                        </Style.Animations>
                    </Style>
                    <Style Selector="^ /template/ ContentPresenter#OverlayMaskContent">
                        <Style.Animations>
                            <Animation Duration="0:0:0.1" IterationCount="1"
                                       FillMode="Forward">
                                <KeyFrame Cue="0%">
                                    <Setter Property="Opacity" Value="1.0"/>
                                </KeyFrame>
                                <KeyFrame Cue="100%">
                                    <Setter Property="Opacity" Value="0"/>
                                </KeyFrame>
                            </Animation>
                        </Style.Animations>
                    </Style>
                    <Style Selector="^ /template/ Grid#GridContentRoot">
                        <Setter Property="Opacity" Value="0"/>
                    </Style>
                </Style>
            </Style>
            <Style Selector="^:overlay-anim">
                <Style Selector="^ /template/ Grid#GridOverlay">
                    <Setter Property="Transitions">
                        <Transitions>
                            <DoubleTransition Property="Opacity"
                                              Duration="0:0:0.2">
                                <DoubleTransition.Easing>
                                    <SineEaseIn/>
                                </DoubleTransition.Easing>
                            </DoubleTransition>
                        </Transitions>
                    </Setter>
                    <Setter Property="Opacity" Value="0"/>
                </Style>
                
                <Style Selector="^:overlay-out">
                    <Style Selector="^ /template/ Grid#GridOverlay">
                        <Setter Property="Opacity" Value="0"/>
                    </Style>
                    <Style Selector="^ /template/ Grid#GridContentRoot">
                        <Setter Property="Opacity" Value="1"/>
                    </Style>
                </Style>
            </Style>
            
            <Style Selector="^:overlay-in">
                <Style Selector="^ /template/ Grid#GridOverlay">
                    <Setter Property="Opacity" Value="1"/>
                </Style>
                <Style Selector="^ /template/ Grid#GridContentRoot">
                    <Setter Property="Opacity" Value="0"/>
                </Style>
            </Style>
            <Style Selector="^ /template/ ProgressBar#OverlayTimeProgressBar">
                <Setter Property="MinWidth" Value="0"/>
            </Style>
        </Style>
    </Style>
</Styles>
